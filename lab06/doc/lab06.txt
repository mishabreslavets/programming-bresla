1. Перш за все, я зробив пустий клас main.

int main(){
        return 0;
}

2. Я добавив інпут матриці та її розміра. Змінна N дуже корисна, вона дозволяє зробити алгорітм єдиним для матриці будь-якого розміру.

int main(){
        const int N = 4;
        int original_matrix[N][N] = {{1, 2, 3, 4}, {5, 6, 7, 8}, {9, 10, 11, 12}, {13, 14, 15, 16}};
        return 0;
}

3. Я добавив 2 цикла for, для перебору кожного елементу масива.

int main(){
        const int N = 4;
        int original_matrix[N][N] = {{1, 2, 3, 4}, {5, 6, 7, 8}, {9, 10, 11, 12}, {13, 14, 15, 16}};
        for(int i = 0; i < N; i++){
                for(int j = 0; j < N; j++){
                }
        }
        return 0;
}

4. Я добавив перевірку условним оператором if, чи входить наступний елемент строки у межі масива. Це дасть можливість виявити останній елемент строки.

int main(){
        const int N = 4;
        int original_matrix[N][N] = {{1, 2, 3, 4}, {5, 6, 7, 8}, {9, 10, 11, 12}, {13, 14, 15, 16}};
        for(int i = 0; i < N; i++){
                for(int j = 0; j < N; j++){
                        if(j+1 == N){
                        }else{
                        }
                }
        }
        return 0;
}

5. Я добавив змінну cur, що буде тимчасово мати значення першого елемента строки для подальшого переприсвоєвуння.

int main(){
        const int N = 4;
        int original_matrix[N][N] = {{1, 2, 3, 4}, {5, 6, 7, 8}, {9, 10, 11, 12}, {13, 14, 15, 16}};
        int cur = 0;
        for(int i = 0; i < N; i++){
                cur = original_matrix[i][0];
                for(int j = 0; j < N; j++){
                        if(j+1 == N){
                        }else{
                        }
                }
        }
        return 0;
}

6. Нарешті, я добавив логіку зміни значень елементів.

int main(){
        const int N = 4;
        int original_matrix[N][N] = {{1, 2, 3, 4}, {5, 6, 7, 8}, {9, 10, 11, 12}, {13, 14, 15, 16}};
        int cur = 0;
        for(int i = 0; i < N; i++){
                cur = original_matrix[i][0];
                for(int j = 0; j < N; j++){
                        if(j+1 == N){
                        original_matrix[i][j] = cur;
                        }else{
                        original_matrix[i][j] = original_matrix[i][j+1];
                        }
                }
        }
        return 0;
}

Я перевірив роботу програми на двох тестах. Першим була матриця 3х3 від 1 до 9.

misha@misha-ThinkPad-E470:~/programming-bresla/lab06$ lldb src/main.bin
(lldb) target create "src/main.bin"
Current executable set to '/home/misha/programming-bresla/lab06/src/main.bin' (x86_64).
(lldb) b 15
Breakpoint 1: where = main.bin`main + 239 at main.c:15:2, address = 0x000000000040121f
(lldb) run
Process 1748 launched: '/home/misha/programming-bresla/lab06/src/main.bin' (x86_64)
Process 1748 stopped
* thread #1, name = 'main.bin', stop reason = breakpoint 1.1
    frame #0: 0x000000000040121f main.bin`main at main.c:15:2
   12  				}
   13  			}
   14  		}
-> 15  		return 0;
   16  	}
(lldb) fr v 
(const int) N = 3
(int [3][3]) original_matrix = {
  [0] = ([0] = 2, [1] = 3, [2] = 1)
  [1] = ([0] = 5, [1] = 6, [2] = 4)
  [2] = ([0] = 8, [1] = 9, [2] = 7)
}
(int) cur = 7

Другим: матриця 4х4 від 1 до 16

misha@misha-ThinkPad-E470:~/programming-bresla/lab06$ lldb src/main.bin
(lldb) target create "src/main.bin"
Current executable set to '/home/misha/programming-bresla/lab06/src/main.bin' (x86_64).
(lldb) b 15
Breakpoint 1: where = main.bin`main + 239 at main.c:15:2, address = 0x000000000040121f
(lldb) run
Process 1776 launched: '/home/misha/programming-bresla/lab06/src/main.bin' (x86_64)
Process 1776 stopped
* thread #1, name = 'main.bin', stop reason = breakpoint 1.1
    frame #0: 0x000000000040121f main.bin`main at main.c:15:2
   12  				}
   13  			}
   14  		}
-> 15  		return 0;
   16  	}
(lldb) fr v
(const int) N = 4
(int [4][4]) original_matrix = {
  [0] = ([0] = 2, [1] = 3, [2] = 4, [3] = 1)
  [1] = ([0] = 6, [1] = 7, [2] = 8, [3] = 5)
  [2] = ([0] = 10, [1] = 11, [2] = 12, [3] = 9)
  [3] = ([0] = 14, [1] = 15, [2] = 16, [3] = 13)
}
(int) cur = 13

Як можно побачити сдвиг здійснено правильно.
